import os, re
import subprocess

def find_repository_name(start_dir="."):
    for root, dirs, files in os.walk(start_dir):
        paths = [path for path in files if re.search("Snakefile|snakefile", path)]
        if paths:
            return re.sub(".\/|workflow","", root)

def find_workflow_path():
    home_directory = os.path.expanduser("~")
    repository_name = find_repository_name(start_dir="~")
    result = subprocess.run(["find", home_directory, "-type", "d", "-name", repository_name ], capture_output=True, text=True)
    return result.stdout

print ( find_workflow_path() )

configfile: re.sub("\s+","", str(find_workflow_path())+"/config/config.yaml")

samples = { samples[:-10] for samples in os.listdir (".") if samples.endswith(".fastq.gz") }
species = { sample[:-1] for sample in samples }

rule all:
    input:
        expand ( '{species}.salmon.index', species=species ),
	expand ( '{sample}.salmon.quants', sample=samples ),
	expand ( '{species}.all.genes.counts', species=species ),
	"PCA.svg"

rule index:
      input: "{species}.fasta"
      output: directory("{species}.salmon.index")
      conda: "envs/salmon.yaml"
      shell: """ salmon index -t {input} 
      	     	 	      -i {output} 
			      --keepDuplicates """

rule selective_alignment:
      input:  "{samples}_1.trimmed.fastq.gz", "{samples}_2.trimmed.fastq.gz"
      output: directory ( "{samples}.salmon.quants" )
      conda: "envs/salmon.yaml"	
      params:
          species = lambda wildcards: wildcards.samples[:-1],
	  threads = config['mapping_threads']
      shell: """ salmon quant -i {params.species}.salmon.index 
      	     	 	      -l A 
			      -1 {input[0]} -2 {input[1]} 
			      --threads {params.threads} 
			      --validateMappings 
			      -o {output} """

rule quantmerge:
     input: expand ( "{sample}.salmon.quants/quant.sf", sample = samples )
     output: expand("{species}.all.genes.counts", species = {params.species} )
     conda: "envs/salmon.yaml"
     params: species = lambda wildcards: wildcards.samples[:-1]
     shell: """ salmon quantmerge --quants {input} 
     	    	       		  --column numreads 
				  --output {output} """

rule PCA: 
     input: expand("{species}.all.genes.counts", species = {params.species} )
     output:  pca="PCA.svg"
     params: species = lambda wildcards: wildcards.samples[:-1]
     shell: """ ls -1 {params.species}.all.genes.counts > quant_list &&\
     
     	    	python3 concatenate_counts.py --quants quant_list
					      --out concatenated_counts.tsv &&\
					      
		Rscript pca.R concatenated_counts.tsv """
