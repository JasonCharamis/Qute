import os, re
import subprocess

def find_workflow_path():
    home_directory = os.path.expanduser("~")
    result = subprocess.run(["find", home_directory, "-type", "d", "-name", "Qute"], capture_output=True, text=True)
    first_hit = result.stdout.splitlines()[0] if result.stdout else None
    return first_hit

configfile: re.sub("\s+","", str(find_workflow_path())+"/config/config.yaml")

samples = { samples[:-19] for samples in os.listdir (".") if samples.endswith("trimmed.fastq.gz") }
species = { sample[:-1] for sample in samples }

rule all:
    input:
        expand ( '{species}.salmon.index', species=species ),
	expand ( '{sample}.salmon.quants', sample = samples ),
	expand ( '{species}.all.genes.counts', species=species )

rule index:
      input: "{species}.fasta"
      output: directory("{species}.salmon.index")
      conda: "envs/salmon.yaml"
      shell: """ salmon index -t {input} 
      	     	 	      -i {output} 
			      --keepDuplicates """

rule selective_alignment:
      input:  "{samples}_1.trimmed.fastq.gz", "{samples}_2.trimmed.fastq.gz"
      output: directory ( "{samples}.salmon.quants" )
      conda: "envs/salmon.yaml"	
      params:
          species = lambda wildcards: wildcards.samples[:-1],
	  threads = config['mapping_threads']
      shell: """ salmon quant -i {params.species}.salmon.index 
      	     	 	      -l A 
			      -1 {input[0]} -2 {input[1]} 
			      --threads {params.threads} 
			      --validateMappings 
			      -o {output} """

rule quantmerge:
     input: expand ( "{sample}.salmon.quants/quant.sf", sample = samples )
     output:  "{params.species}.all.genes.counts"
     conda: "envs/salmon.yaml"
     params: species = lambda wildcards: wildcards.samples[:-1]
     shell: """ salmon quantmerge --quants {input} 
     	    	       		  --column numreads 
				  --output {output} """
